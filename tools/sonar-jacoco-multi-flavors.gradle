apply plugin: 'jacoco'
allprojects {
    jacoco {
        toolVersion = "0.8.7"
    }
}
/**
 * This file defines tasks to create a code coverage report and send it to your sonarqube instance.
 * Here we will use sonarcloud.io as our sonarqube instance.
 */

/**
 * Change these variables according to your project
 */
// build type of the variant you would like to run tests on.
def buildTypeNameForSonarqube = "debug"
// flavor name of the variant you would like to run tests on.
def flavorNameForSonarqube = "dev"
// a token used by this task to authenticate on sonarcloud
def sonarcloudLoginToken = "31eea37e2e4c642c8c28bd0b5dbb15e90bb4d761"
// build type of the variant you would like to run tests on.
def sonarcloudProjectKey = "stephane-news-android"
def sonarcloudProjectDisplayName = "Stephane News Android"
/**
 * From now on don't change anything. It should work.
 */

def variantNameForSonarqube = "$flavorNameForSonarqube${buildTypeNameForSonarqube.capitalize()}"

afterEvaluate {

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.class',
                      '**/Manifest.class',
                      '**/Manifest$*.class',
                      '**/*$InjectAdapter.class',
                      '**/*$ModuleAdapter.class',
                      '**/*$ViewInjector*.class',
                      '**/*_MembersInjector.class',
                      '**/*Module_*Factory.class',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                      '**/*$*$*.*', // Anonymous classes generated by kotlin
                      //add libraries
                      'android/**/*.*',
                      'io/**/*.*',
                      '**/com/bumptech/**/*.*',
                      //remove what we don't test
                      'androidTest*/**/*.*',
                      'test/**/*.*'
    ]

    /**
     * Create a unified coverage report (unit tests + UI tests)
     */
    task jacocoTestReport(type: JacocoReport) {

        def javaSrc = [
                // add main src folder
                "src/main/java",
                // add build type src folder
                "src/main/kotlin",
                // add flavor specific folders
                "src/$flavorNameForSonarqube/java",
                // add build type folder
                "src/$buildTypeNameForSonarqube/java"
        ]

        def javaClasses = fileTree(dir: "$project.buildDir/intermediates/javac/$variantNameForSonarqube", excludes: fileFilter)
        def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/$variantNameForSonarqube", excludes: fileFilter)

        def dependencyTasks
        if (project.plugins.hasPlugin('com.android.application') ||
                project.plugins.hasPlugin("com.android.library")) {
            dependencyTasks = ["test${variantNameForSonarqube.capitalize()}UnitTest"]
        } else {
            kotlinClasses = fileTree(dir: "$project.buildDir/classes/kotlin/main", excludes: fileFilter)
            dependencyTasks = ['test']
        }

        dependsOn {
            dependencyTasks
        }

        reports {
            xml.enabled = true
            html.enabled = true
        }

        getAdditionalClassDirs().setFrom(javaSrc)
        getSourceDirectories().setFrom(javaSrc)
        getClassDirectories().setFrom([javaClasses, kotlinClasses])

        getExecutionData().setFrom([fileTree(dir: project.projectDir, includes: [
                "**/*.exec", "**/*.ec"
        ])], [fileTree(dir: "${System.env.VDTESTING_DOWNLOADED_FILES_DIR}", includes: [
                '*sdcard_coverage.ec', "**/*.exec", "**/*.ec"
        ])])

    }

    def reportsForSonarqube = "jacocoTestReport"
    def unitTestsTaskNameForSonarqube = "test${variantNameForSonarqube.capitalize()}UnitTest"
    def uiTestsTaskNameForSonarqube = "create${variantNameForSonarqube.capitalize()}CoverageReport"

    /**
     * Runs tests + create unified coverage report + upload to sonarcloud.io
     * Run this task on local machine only
     */
    task qualityReportToSonarqubeFromLocalMachine {
        group = "Reporting"
        description = "Generate Jacoco coverage reports on the $variantNameForSonarqube variant and send data to Sonarqube"

        dependsOn 'clean'
        dependsOn "$unitTestsTaskNameForSonarqube"
        dependsOn "$uiTestsTaskNameForSonarqube"
        dependsOn "$reportsForSonarqube"
        dependsOn 'sonarqube'
        tasks.findByName("$unitTestsTaskNameForSonarqube").mustRunAfter 'clean'
        tasks.findByName("$uiTestsTaskNameForSonarqube").mustRunAfter 'clean'
        tasks.findByName("$reportsForSonarqube").mustRunAfter "$uiTestsTaskNameForSonarqube"
        tasks.findByName("$reportsForSonarqube").mustRunAfter "$unitTestsTaskNameForSonarqube"
        tasks.findByName('sonarqube').mustRunAfter "$reportsForSonarqube"
    }

}

/**
 * Configuration to upload coverage reports and metric to sonarcloud
 */
apply plugin: 'org.sonarqube'
sonarqube {

    // we can only send data for one variant to sonarqube
    // so we choose the closest variant to production
    androidVariant variantNameForSonarqube

    properties {
        property "sonar.projectName", "$sonarcloudProjectDisplayName"
        property "sonar.projectKey", "$sonarcloudProjectKey"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", "$sonarcloudLoginToken"

        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.exclusions', '**/*.js,**/*.css,**/*.html'
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

        property 'sonar.java.binaries', 'build/tmp/kotlin-classes/' + variantNameForSonarqube
        property 'sonar.java.test.binaries', 'build/tmp/kotlin-classes/' + variantNameForSonarqube
        property 'sonar.coverage.jacoco.xmlReportPaths', [fileTree(dir: project.projectDir, includes: ['**/jacoco*.xml'])]
        property 'detekt.sonar.kotlin.config.path', 'tools/default-detekt-config.yml'
    }
}



